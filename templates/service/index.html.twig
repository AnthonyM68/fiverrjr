{% extends 'base.html.twig' %}

{% block title %}Hello ServiceController!{% endblock %}

{% block body %}



{% if formAddCourse is defined %}
{# Démarre le formulaire et ajoute des attributs HTML #}
{{ form_start(formAddCourse, {'attr': { id: 'category_annonce_form' }}) }}
{# champ Category identifiant spécifique #}
{{ form_row(formAddCourse.category, {'attr': { id: 'annonce_category' }}) }}
{# champ Namecourse identifiant spécifique #}
{{ form_row(formAddCourse.Namecourse, {'attr': { id: 'annonce_Namecourse' }}) }}
{{ form_end(formAddCourse) }}
{% endif %}


{% if formAddService|default %}
{{ form_start(formAddService, {'attr': {'class': 'ui form'}}) }}
<div class="field">
    {{ form_row(formAddService.title) }}
</div>
<div class="field">
    {{ form_row(formAddService.description) }}
</div>
<div class="field">
    {{ form_row(formAddService.price) }}
</div>
<div class="field">
    {{ form_row(formAddService.duration) }}
</div>
<div class="field">
    {{ form_row(formAddService.Valider) }}
</div>
{{ form_end(formAddService) }}
{% endif %}



{% if services | default %}
{% for service in services %}
{{ service }}
{% endfor %}
{% endif %}



<script>
    // récupère l'élément du formulaire par son identifiant 
    const form = document.getElementById('category_annonce_form');
    // récupère l'élément de sélection Theme par son identifiant 
    const form_select_theme = document.getElementById('annonce_theme');
    // récupère l'élément de sélection Category par son identifiant 
    const form_select_category = document.getElementById('annonce_category');
    // récupère l'élément de sélection Namecourse par son identifiant 
    const form_select_course = document.getElementById('annonce_Namecourse');

    // mettre à jour le formulaire 
    // on prépare la requête AJAX
    const updateForm = async (data, url, method) => {
        const requestOptions = {
            method: method,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'charset': 'utf-8'
            }
        };
        // Ajoutez le corps de la requête uniquement si la méthode n'est pas GET
        if (method !== 'GET') {
            requestOptions.body = data;
        }

        try {
            // execute la requête et récupère les courses par méthode Fetch
            const req = await fetch(url, requestOptions);
            const text = await req.text();
            // vérifie la réponse brute dans la console
            // console.log('Response text:', text); 
            return JSON.parse(text); // Parse la réponse JSON
        } catch (error) {
            console.error('Failed to fetch or parse JSON:', error);
            return []; // Retourne une liste vide en cas d'erreur
        }
    };
    // mettre à jour les options du champ Namecourse en fonction de la catégorie sélectionnée 
    const changeOptions = async (e) => {
        // on récupère l'id
        const categoryId = e.target.value;
        const url = `/categories/${categoryId}`;
        // on récupère les courses appartenant a la category
        const courses = await updateForm('', url, 'GET');

        // Vérifie que courses est un tableau avant de l'itérer
        if (Array.isArray(courses)) {
            // Effacez les options actuelles
            form_select_course.innerHTML = '';
            // Ajoutez les nouvelles options
            courses.forEach(course => {
                // console.log('Adding course:', course);
                const option = document.createElement('option');
                option.value = course.id; // on attribut l'id à l'option
                option.textContent = course.name; // on récupère le nom de course

                form_select_course.appendChild(option);
            });
            //console.log('Updated select options:', form_select_course.innerHTML); 
        }
        /*else {
            console.error('Expected an array of courses but got:', courses);
        }*/
    };

    form_select_category.addEventListener('change', (e) => changeOptions(e));
</script>
{% endblock %}