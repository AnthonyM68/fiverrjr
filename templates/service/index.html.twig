{% extends 'base.html.twig' %}

{% block title %}Hello ServiceController!{% endblock %}



{% block body %}
{% if formAddCategory is defined %}


{{ form_start(formAddCategory) }}
{{ form_row(formAddCategory.theme) }}
{{ form_row(formAddCategory.NameCategory) }}
{{ form_end(formAddCategory) }}
{% endif %}

{% if formAddCourse is defined %}
{{ form_start(formAddCourse) }}
{{ form_row(formAddCourse.category) }}
{{ form_row(formAddCourse.NameCourse) }}
{{ form_end(formAddCourse) }}
{% endif %}



<hr>

{% if formAddService|default %}
{{ form_start(formAddService, {'attr': {'class': 'ui form'}}) }}
<div class="field">
    {{ form_row(form.course.NameCourse, {'attr': {'id': 'service_annonce_course'}}) }}
</div>
<div class="field">
    {{ form_row(form.title) }}
</div>
<div class="field">
    {{ form_row(form.description) }}
</div>
<div class="field">
    {{ form_row(form.price) }}
</div>
<div class="field">
    {{ form_row(form.duration) }}
</div>

{{ form_row(form.valider) }}
{{ form_end(form) }}
{% endif %}

{% if services | default %}
{% for service in services %}
{{ service }}
{% endfor %}
{% endif %}

<script>
    // récupère l'élément du formulaire par son identifiant 
    const form = document.getElementById('courses_form');
    // récupère l'élément de sélection Theme par son identifiant 
    const form_select_theme = document.getElementById('categories_form_theme');
    // récupère l'élément de sélection Category par son identifiant 
    const form_select_category = document.getElementById('categories_form_NameCategory');
    // récupère l'élément de sélection Namecourse par son identifiant 
    const form_select_course = document.getElementById('courses_form_NameCourse');

    // mettre à jour le formulaire 
    // on prépare la requête AJAX
    const updateForm = async (data, url, method) => {
        const requestOptions = {
            method: method,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'charset': 'utf-8'
            }
        };
        // Ajoutez le corps de la requête uniquement si la méthode n'est pas GET
        if (method !== 'GET') {
            requestOptions.body = data;
        }

        try {
            // execute la requête et récupère les courses par méthode Fetch
            const req = await fetch(url, requestOptions);
            const text = await req.text();
            // vérifie la réponse brute dans la console
             console.log('Response text:', text); 
            return JSON.parse(text); // Parse la réponse JSON
        } catch (error) {
            console.error('Failed to fetch or parse JSON:', error);
            return []; // Retourne une liste vide en cas d'erreur
        }
    };

    // Fonction pour changer les options du champ Category en fonction du Theme sélectionné
    const changeCategories = async (e) => {
        const themeId = e.target.value;
        const url = `/themes/${themeId}`;
        const categories = await updateForm('', url, 'GET');
    
        if (Array.isArray(categories)) {
            form_select_category.innerHTML = '';
            categories.forEach(category => {
                const option = document.createElement('option');
                option.value = category.id;
                option.textContent = category.name; // Utilisez le bon nom de propriété
                form_select_category.appendChild(option);
            });
        }
    };
    // Fonction pour changer les options du champ NameCourse en fonction de la Category sélectionnée
    const changeCourses = async (e) => {
        const categoryId = e.target.value;
        const url = `/categories/${categoryId}`;
        const courses = await updateForm('', url, 'GET');
    
        if (Array.isArray(courses)) {
            form_select_course.innerHTML = '';
            courses.forEach(course => {
                const option = document.createElement('option');
                option.value = course.id;
                option.textContent = course.name; // Utilisez le bon nom de propriété
                form_select_course.appendChild(option);
            });
        }
    };
    

    // Écouteur d'événement pour le changement de Theme
    form_select_theme.addEventListener('change', (e) => {
        changeCategories(e);
        form_select_category.dispatchEvent(new Event('change')); // Déclenche le changement de Category après avoir changé le Theme
    });

    // Écouteur d'événement pour le changement de Category
    form_select_category.addEventListener('change', (e) => changeCourses(e));
</script>
{% endblock %}