{% extends 'base.html.twig' %}

{% block title %}Hello ServiceController!{% endblock %}

{% block body %}


{% if service|default %}
{{ service.title }}
{% endif %}

{% if form is defined %}
{{ form_start(form, {'attr': {'class': 'ui form'}}) }}

<div class="field">
    {{ form_row(form.course.theme) }}
</div>
<div class="field">
    {{ form_row(form.course.category) }}
</div>
<div class="field">
   {{ form_row(form.course.course) }} 
</div>

<div class="field">
    {{ form_row(form.user) }} 
 </div>
<hr>
<div class="field">
    {{ form_row(form.title) }}
</div>
<div class="field">
    {{ form_row(form.description) }}
</div>
<div class="field">
    {{ form_row(form.price) }}
</div>
<div class="field">
    {{ form_row(form.duration) }}
</div>
{{ form_row(form.submit) }} 
{{ form_end(form) }}
{% endif %}
{% if error is defined %}
{% for error in form.vars.errors %}
    <div class="ui error message">{{ error.message }}</div>
{% endfor %}
{% endif %}


{% if services | default %}

<div class="ui list">
    {% for service in services %}
    <div class="item">
        <i class="folder icon"></i>
        <div class="content">
            <div class="header">{{ service.title }}</div>
            {# <div class="description">Source files for project</div> #}
        </div>
    </div>
    {% endfor %}
</div>
{% endif %} 

<script>
    // Sélection des éléments du formulaire
    const form_select_theme = document.getElementById('service_course_theme');
    const form_select_category = document.getElementById('service_course_category');
    const form_select_course = document.getElementById('service_course_course');

    const updateForm = async (url) => {
        try {
            const req = await fetch(url);
            return await req.json();
        } catch (error) {
            console.error('Failed to fetch or parse JSON:', error);
            return [];
        }
    };
    // Fonction pour mettre à jour les catégories dynamiquement
    const updateCategories = async (e) => {
        const themeId = e.target.value;
        const url = `/categories_by_theme/${themeId}`;
        const categories = await updateForm(url);

        form_select_category.innerHTML = '';
        // On boucle sur les categories et remplissons le champs d'options
        categories.forEach(category => {
            const option = document.createElement('option');
            option.value = category.id;
            option.textContent = category.name;
            form_select_category.appendChild(option);
        });
        // Afficher le champ Category une fois que les options sont chargées
        updateCourses();
    };
    // Fonction pour mettre à jour les cours dynamiquement
    const updateCourses = async () => {
        const categoryId = form_select_category.value;
        const url = `/courses_by_category/${categoryId}`;

        const courses = await updateForm(url);
        console.log(courses);

        form_select_course.innerHTML = '';
        // On boucle sur les courses et remplissons le champs d'options
        courses.forEach(course => {
            const option = document.createElement('option');
            option.value = course.id;
            option.textContent = course.name;
            form_select_course.appendChild(option);
        });
    };
    form_select_theme.addEventListener('change', updateCategories);
    form_select_category.addEventListener('change', updateCourses);
</script>
{% endblock %}